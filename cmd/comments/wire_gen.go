// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/mi-raf/comment-project/internal/api"
	"github.com/mi-raf/comment-project/internal/database"
	"github.com/mi-raf/comment-project/internal/service"
)

import (
	_ "github.com/golang-migrate/migrate/v4/database/postgres"
	_ "github.com/golang-migrate/migrate/v4/source/file"
	_ "github.com/joho/godotenv/autoload"
)

// Injectors from wire.go:

func initApp(ctx context.Context, cfg *config) (*api.API, func(), error) {
	postConfig := initPostRepositoryConfig(cfg)
	postRepository, cleanup, err := database.NewPostRepositoryProvider(ctx, postConfig)
	if err != nil {
		return nil, nil, err
	}
	v, cleanup2 := service.NewCommentChan()
	commentConfig := initCommentRepositoryConfig(cfg, v)
	commentRepository, cleanup3, err := database.NewCommentRepositoryProvider(ctx, commentConfig)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	serviceConfig := initServiceConfig(v)
	postService, cleanup4 := service.NewPostService(ctx, postRepository, commentRepository, serviceConfig)
	resolver := api.NewResolver(postService)
	apiConfig := initApiConfig(cfg, resolver)
	apiAPI := api.NewApi(ctx, apiConfig)
	return apiAPI, func() {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
