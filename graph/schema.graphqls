type Post  {
 	id:         ID!
 	author:     String!
 	title:      String!
 	text:       String!
 	time:  Time!
 	isCommentable: Boolean!
 	comments: CommentsResult
}

type CommentConnection {
 	id: ID!
 	parentId: ID
 	level: Int!
 	comment: Comment!
 	postId: ID!
}

type Comment {
 	author:     String!
 	text:     String!
 	time:  Time!
}

type CommentsResult {
 	comments: [CommentConnection!]
 	pageInfo: PageInfo!
}

type ShortPost {
 id: ID!
 author: String!
 title: String!
}

type PageInfo {
    endCursor: ID
}

input NewPost {
    author:     String!
 	title:      String!
 	text:       String!
 	time:  Time!
 	isCommentable: Boolean
}

input NewComment {
 	author:     String!
 	text:     String!
 	time:  Time!
}

type Mutation {
    createPost(input: NewPost!): Post!
    createComment(postId: ID!, parentComment: ID, comment: NewComment!): ID!
}

type Query {
   	posts(count: Int, after: ID): [ShortPost!]
	post(postId: ID!, count: Int): Post!
 	comments(postId: ID!, count: Int, after: ID): CommentsResult!
}

type Subscription {
    commentSubscribe(postId: ID!): CommentConnection!
}

scalar Time